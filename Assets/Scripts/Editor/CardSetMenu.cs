using UnityEngine;
using UnityEditor;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Collections.Generic;

namespace FGMath
{
public class CardSetMenu : AssetPostprocessor
{
    static int _cardSetCount = 0;

    [MenuItem("FG Card Game/Reload Card Sets", priority=int.MaxValue)]
    static void Generate()
    {
        // If anyone knows a better way to do this, please tell me..
        string relativePath = "Assets/Scripts/Editor/Generated/GeneratedMenuItems.cs";
        string fullPath = Path.Join(Application.dataPath, "..", relativePath);

        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// AUTOGENERATED CODE //");
        sb.AppendLine("using UnityEditor;");
        sb.AppendLine("");
        sb.AppendLine("namespace FGMath");
        sb.AppendLine("{");
        sb.AppendLine("");
        sb.AppendLine("public static class GeneratedMenuItems");
        sb.AppendLine("{");
        sb.AppendLine("");

        var guids = AssetDatabase.FindAssets("t:CardSetSO");
        sb.AppendLine("    static readonly string[] guids = new string[]");
        sb.AppendLine("    {");
        foreach (var guid in guids)
        {
            sb.AppendLine("        \"" + AssetDatabase.GUIDToAssetPath(guid) + "\",");
        }
        sb.AppendLine("    };");
        sb.AppendLine("");

        HashSet<string> usedNames = new();
        foreach (var guid in guids)
        {
            var assetPath = AssetDatabase.GUIDToAssetPath(guid);
            CardSetSO cardSet = AssetDatabase.LoadAssetAtPath<CardSetSO>(assetPath);

            string menuName = cardSet.name;
            {
                int i=1;
                while(usedNames.Contains(menuName))
                {
                    menuName = cardSet.name + " " + i.ToString();
                }
            }
            usedNames.Add(menuName);

            var cleanName = Regex.Replace(menuName, "[^a-zA-Z0-9_.]+", "", RegexOptions.Compiled);
            sb.AppendLine("    [MenuItem(\"FG Card Game/Choose Card Set/" + menuName + "\")]");
            sb.AppendLine("    private static void MenuItem" + cleanName + "()");
            sb.AppendLine("    {");
            sb.AppendLine("        CardSetMenu.SetAddressableLabelToActive(\"" + assetPath + "\", guids);");
            sb.AppendLine("        CardSetMenu.LoadCardSetFromPath(\"" + assetPath + "\");");
            sb.AppendLine("    }");
            sb.AppendLine("");
        }

        sb.AppendLine("");
        sb.AppendLine("}");
        sb.AppendLine("}");

        if(File.Exists(fullPath)) File.Delete(fullPath);
        File.WriteAllText(fullPath, sb.ToString(), Encoding.UTF8);
        AssetDatabase.ImportAsset(relativePath);

        _cardSetCount = guids.Length;
    }

    public static void SetAddressableLabelToActive(string active, string[] all)
    {
        string groupName = "CardSets";
        string label = "ActiveCardSet";

        foreach(var path in all)
        {
            var obj = AssetDatabase.LoadAssetAtPath<CardSetSO>(path);
            var entry = AddressableHelper.CreateAssetEntry(obj, groupName);
            if(path == active) entry.labels.Add(label);
            else entry.labels.Remove(label);
        }
    }

    public static void LoadCardSetFromPath(string assetPath)
    {
        var cardSet = AssetDatabase.LoadAssetAtPath<CardSetSO>(assetPath);
        if(cardSet == null) 
        {
            var guids = AssetDatabase.FindAssets("t:CardDataSO");
            if(guids.Length == 0) Debug.LogAssertion("You don't appear to have any CardDataSO assets in the project! MAKE ONE!");

            var defaultAssetPath = AssetDatabase.GUIDToAssetPath(guids[0]);

            cardSet = AssetDatabase.LoadAssetAtPath<CardSetSO>(defaultAssetPath);
        }
        GameManager.CardSet = cardSet;
    }


    static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths, bool didDomainReload)
    {
        foreach (string str in importedAssets)
        {
            var type = AssetDatabase.GetMainAssetTypeAtPath(str);
            if(type == typeof(CardSetSO))
            {
                Generate();
            }
        }
        
        if(deletedAssets.Length > 0)
        {
            var guids = AssetDatabase.FindAssets("t:CardDataSO");
            if(guids.Length != _cardSetCount)
            {
                Generate();
            }
        }

        for (int i = 0; i < movedAssets.Length; i++)
        {
            var type = AssetDatabase.GetMainAssetTypeAtPath(movedAssets[i]);
            if(type == typeof(CardSetSO))
            {
                Generate();
            }
        }
    }
}
}